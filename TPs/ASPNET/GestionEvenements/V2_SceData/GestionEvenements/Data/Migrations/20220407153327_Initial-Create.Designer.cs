// <auto-generated />
using System;
using GestionEvenements.Data;
using GestionEvenements.Services.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestionEvenements.Data.Migrations
{
    [DbContext(typeof(GevDbContext))]
    [Migration("20220407153327_Initial-Create")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Modele.Adresse", b =>
                {
                    b.Property<int>("AdresseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdresseId"), 1L, 1);

                    b.Property<string>("CodePostal")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Region")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Rue")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("AdresseId");

                    b.ToTable("Adresses");

                    b.HasData(
                        new
                        {
                            AdresseId = 1,
                            CodePostal = "75015",
                            Notes = "Fondation à but non lucratif consacrée à l'étude de la biologie et des micros-organismes.",
                            Pays = "France",
                            Region = "Ile de France",
                            Rue = "25-28 Rue du Dr Roux",
                            Titre = "Institut Pasteur",
                            Ville = "Paris"
                        },
                        new
                        {
                            AdresseId = 2,
                            Latitude = 47.646388899999998,
                            Longitude = -122.13500000000001,
                            Notes = "Construit en 1986 sur 2 Ha pour plus de 40 000 salariés.",
                            Pays = "USA",
                            Region = "Washington",
                            Titre = "Campus Microsoft",
                            Ville = "Redmond"
                        },
                        new
                        {
                            AdresseId = 3,
                            Latitude = 37.421900000000001,
                            Longitude = -122.0838,
                            Notes = "Site (parmi 23 aux USA et autant en Europe) principal de la firme.",
                            Pays = "Santa Clara",
                            Region = "Californie",
                            Titre = "Googleplex",
                            Ville = "Zee-Town"
                        },
                        new
                        {
                            AdresseId = 4,
                            Latitude = 37.481099999999998,
                            Longitude = -122.1538,
                            Notes = "En cours de construction depuis 2012 sur 80 Ha.",
                            Pays = "USA",
                            Region = "Californie",
                            Titre = "Facebook City",
                            Ville = "Zee-Town"
                        });
                });

            modelBuilder.Entity("Modele.Evenement", b =>
                {
                    b.Property<int>("EvenementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvenementId"), 1L, 1);

                    b.Property<int?>("AdresseId")
                        .HasColumnType("int");

                    b.Property<int>("Annee")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateEvenement")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TypeEvenementId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("EvenementId");

                    b.HasIndex("AdresseId");

                    b.HasIndex("TypeEvenementId");

                    b.ToTable("Evenements");

                    b.HasData(
                        new
                        {
                            EvenementId = 1,
                            Annee = 1455,
                            Description = "L'invention de l'imprimerie commence par la publication de la Bible en 1455.",
                            Titre = "Invention de l'imprimerie",
                            TypeEvenementId = 4,
                            Url = "https://www.histoire-pour-tous.fr/inventions/307-invention-de-imprimerie.html"
                        },
                        new
                        {
                            EvenementId = 2,
                            Annee = 1769,
                            Description = "Le premier véhicule automobile a été créé en 1769 par Joseph Cugnot. Le premier moteur à essence a été créé en 1883 à Rouen par Edouard Delamare-Deboutteville.",
                            Titre = "Invention de l'automobile",
                            TypeEvenementId = 4,
                            Url = "https://www.histoire-pour-tous.fr/dossiers/168-histoire-des-inventions-les-transports-terrestres.html"
                        },
                        new
                        {
                            EvenementId = 3,
                            Annee = 1876,
                            Titre = "Invention du téléphone par Alexander Graham Bell",
                            TypeEvenementId = 1,
                            Url = "https://fr.wikipedia.org/wiki/Téléphone"
                        },
                        new
                        {
                            EvenementId = 4,
                            AdresseId = 1,
                            Annee = 1885,
                            Description = "Invention du premier vaccin contre la rage.",
                            Titre = "Invention du vaccin",
                            TypeEvenementId = 1,
                            Url = "https://fr.wikipedia.org/wiki/Louis_Pasteur"
                        },
                        new
                        {
                            EvenementId = 5,
                            Annee = 1897,
                            Description = "Inventé par Karl Ferdinand Braun, la télévision couleur voit le jour en 1928.",
                            Titre = "Le premier tube cathodique",
                            TypeEvenementId = 4,
                            Url = "https://fr.wikipedia.org/wiki/Télévision"
                        },
                        new
                        {
                            EvenementId = 6,
                            Annee = 1903,
                            Description = "Le premier vol motorisé.",
                            Titre = "Début de l'aviation",
                            TypeEvenementId = 4,
                            Url = "https://fr.wikipedia.org/wiki/Histoire_de_laviation"
                        },
                        new
                        {
                            EvenementId = 7,
                            Annee = 1969,
                            Description = "Neil Armstrong pose le pied sur la lune lors de la mission Apollo 11.",
                            Titre = "Le premier pas sur la lune",
                            TypeEvenementId = 4,
                            Url = "https://fr.wikipedia.org/wiki/Apollo_11"
                        },
                        new
                        {
                            EvenementId = 8,
                            Annee = 1975,
                            Description = "MS est créé par Bill Gates et Paul Allen qui lance MS-DOS, Windows, Office puis .NET en 2002. Apple est créé l'année suivante par Steve Jobs.",
                            Titre = "Le lancement du PC",
                            TypeEvenementId = 4,
                            Url = "https://fr.wikipedia.org/wiki/Microsoft"
                        },
                        new
                        {
                            EvenementId = 9,
                            Annee = 1990,
                            Description = "Les bases sont créées dans le cadre du projet ARPANET dans les années 60. Le protocole HTTP est développé au CERN par Tim Berners-Lee et Robert Cailliau dans les années 90",
                            Titre = "Le lancement d'Internet",
                            TypeEvenementId = 4,
                            Url = "https://fr.wikipedia.org/wiki/Internet"
                        },
                        new
                        {
                            EvenementId = 10,
                            AdresseId = 3,
                            Annee = 1998,
                            Description = "Google est créé dans la Silicon Valleypar Larry Page et Sergey Brin.",
                            Titre = "Le lancement de Google",
                            TypeEvenementId = 2,
                            Url = "https://fr.wikipedia.org/wiki/Google"
                        },
                        new
                        {
                            EvenementId = 11,
                            AdresseId = 4,
                            Annee = 2006,
                            Description = "Mark Zuckerberg développe son réseau qui s'ouvre au public qui atteint 2 mds d'utilisdateurs en 2017.",
                            Titre = "Les réseaux sociaux",
                            TypeEvenementId = 2,
                            Url = "https://fr.wikipedia.org/wiki/Facebook"
                        },
                        new
                        {
                            EvenementId = 12,
                            Annee = 2007,
                            Description = "L'iPhone est lancé avec une interface tactile et un ensemble des services connectés qui vont devenir Apple Store.",
                            Titre = "La mobilité",
                            TypeEvenementId = 2,
                            Url = "https://fr.wikipedia.org/wiki/Apple"
                        },
                        new
                        {
                            EvenementId = 13,
                            AdresseId = 2,
                            Annee = 2016,
                            Description = ".NET devient multi-plateformes et Open Source.",
                            Titre = ".NET Core",
                            TypeEvenementId = 2,
                            Url = "https://dotnet.microsoft.com/platform/support/policy/dotnet-core"
                        },
                        new
                        {
                            EvenementId = 14,
                            AdresseId = 2,
                            Annee = 2020,
                            Description = ".NET 5 fusionne le Framework .NET et Core avec un sous-ensemble commun dénommé .NET Standard.",
                            Titre = ".NET 5",
                            TypeEvenementId = 2,
                            Url = "https://dotnet.microsoft.com/platform/support/policy/dotnet-core"
                        });
                });

            modelBuilder.Entity("Modele.Participant", b =>
                {
                    b.Property<int>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParticipantId"), 1L, 1);

                    b.Property<string>("Activites")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("AnneeDeces")
                        .HasColumnType("int");

                    b.Property<int?>("AnneeNaissance")
                        .HasColumnType("int");

                    b.Property<int>("Civilite")
                        .HasColumnType("int");

                    b.Property<string>("LieuNaissance")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prenom")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ParticipantId");

                    b.ToTable("Participants");

                    b.HasData(
                        new
                        {
                            ParticipantId = 1,
                            Activites = "L'inventeur de l'imprimerie.",
                            AnneeDeces = 1468,
                            AnneeNaissance = 1395,
                            Civilite = 1,
                            LieuNaissance = "Mayence en Allemagne",
                            Nom = "Gutenberg",
                            Url = "https://www.histoire-pour-tous.fr/inventions/307-invention-de-imprimerie.html"
                        },
                        new
                        {
                            ParticipantId = 2,
                            Activites = "Inventeur du premier vaccin contre la rage.",
                            AnneeDeces = 1895,
                            AnneeNaissance = 1822,
                            Civilite = 1,
                            LieuNaissance = "Dole",
                            Nom = "Pasteur",
                            Url = "https://fr.wikipedia.org/wiki/Louis_Pasteur"
                        },
                        new
                        {
                            ParticipantId = 3,
                            Activites = "L'un des principaux inventeurs du Web, fondateur du W3C.",
                            AnneeNaissance = 1955,
                            Civilite = 1,
                            LieuNaissance = "Londres",
                            Nom = "Berners-Lee",
                            Prenom = "Tim",
                            Url = "https://fr.wikipedia.org/wiki/Tim_Berners-Lee"
                        },
                        new
                        {
                            ParticipantId = 4,
                            Activites = "Fondateur de Microsoft avec Paul Allen.",
                            AnneeNaissance = 1955,
                            Civilite = 1,
                            LieuNaissance = "Seattle",
                            Nom = "Gates",
                            Prenom = "Bill",
                            Url = "https://fr.wikipedia.org/wiki/Bill_Gates"
                        });
                });

            modelBuilder.Entity("Modele.Participation", b =>
                {
                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.Property<int>("EvenementId")
                        .HasColumnType("int");

                    b.Property<string>("Commentaires")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("ParticipantId", "EvenementId");

                    b.HasIndex("EvenementId");

                    b.ToTable("Participations");

                    b.HasData(
                        new
                        {
                            ParticipantId = 1,
                            EvenementId = 1
                        },
                        new
                        {
                            ParticipantId = 2,
                            EvenementId = 4
                        },
                        new
                        {
                            ParticipantId = 3,
                            EvenementId = 9
                        },
                        new
                        {
                            ParticipantId = 4,
                            EvenementId = 8
                        });
                });

            modelBuilder.Entity("Modele.TypeEvenement", b =>
                {
                    b.Property<int>("TypeEvenementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeEvenementId"), 1L, 1);

                    b.Property<string>("Libelle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TypeEvenementId");

                    b.ToTable("TypesEvenement");

                    b.HasData(
                        new
                        {
                            TypeEvenementId = 1,
                            Libelle = "Scientifique"
                        },
                        new
                        {
                            TypeEvenementId = 2,
                            Libelle = "IT"
                        },
                        new
                        {
                            TypeEvenementId = 3,
                            Libelle = "Culturel"
                        },
                        new
                        {
                            TypeEvenementId = 4,
                            Libelle = "Invention"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modele.Evenement", b =>
                {
                    b.HasOne("Modele.Adresse", "Adresse")
                        .WithMany()
                        .HasForeignKey("AdresseId");

                    b.HasOne("Modele.TypeEvenement", "TypeEvenement")
                        .WithMany()
                        .HasForeignKey("TypeEvenementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adresse");

                    b.Navigation("TypeEvenement");
                });

            modelBuilder.Entity("Modele.Participation", b =>
                {
                    b.HasOne("Modele.Evenement", "Evenement")
                        .WithMany("Participations")
                        .HasForeignKey("EvenementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modele.Participant", "Participant")
                        .WithMany("Participations")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evenement");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Modele.Evenement", b =>
                {
                    b.Navigation("Participations");
                });

            modelBuilder.Entity("Modele.Participant", b =>
                {
                    b.Navigation("Participations");
                });
#pragma warning restore 612, 618
        }
    }
}
