public interface IRepository<T>
{
    IAsyncEnumerable<T> Liste();
    IQueryable<T> ListeIncluding(params Expression<Func<T, object>>[] includeProperties);
    Task<T?> LireAsync(int id);
    bool Existe(int id);
    Task<int> Creer(T entite);
    Task<int> Modifier(T entite);
    Task<int> Supprimer(T entite);
}

RepoBase
========
	private readonly GevDbContext _context;
	public GevDbContext Context => _context;

	public RepoBase(GevDbContext context)
	{
		_context = context;
	}
		
	protected async Task<int> Enregistrer(object entite, EntityState state)
	{
		if (entite == null) return 0; // On pourrait lever une Exception
		_context.Entry(entite).State = state;
		return await _context.SaveChangesAsync();
	}

	protected void NoTracking()
	{
		_context.ChangeTracker.AutoDetectChangesEnabled = false;
		_context.ChangeTracker.LazyLoadingEnabled = false;
		_context.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;
	}
			
Repos Participants, Ev et Adresse
=================================

using Microsoft.EntityFrameworkCore;
using Modele;
using System.Linq.Expressions;

namespace GestionEvenements.Services.Dal
{
    public class RepoParticipants : RepoBase, IRepositoryParticipants
    {      

        public RepoParticipants(GevDbContext context) : base(context)
        {
            
        }

        public async Task<int> Creer(Participant participant)
        {
            return await Enregistrer(participant, EntityState.Added);
        }

        public bool Existe(int id)
        {
            NoTracking();
            return Context.Participants.Any(e => e.ParticipantId == id);
        }

        public async Task<Participant?> LireAsync(int id)
        {
            NoTracking();
            var participant = Context.Participants
                .Include(it => it.Participations)
                .ThenInclude(it => it.Evenement)
                .SingleOrDefaultAsync(it => it.ParticipantId == id);
            return await participant;
        }

        public IAsyncEnumerable<Participant> Liste()
        {
            NoTracking();
            return Context.Participants.AsAsyncEnumerable();
        }

        public IQueryable<Participant> ListeIncluding(params Expression<Func<Participant, object>>[] includeProperties)
        {
            NoTracking();
            return includeProperties.Aggregate<Expression<Func<Participant, object>>, IQueryable<Participant>>(Context.Participants, (current, includeProperty) => current.Include(includeProperty));
        }

        public async Task<int> Modifier(Participant participant)
        {
            return await Enregistrer(participant, EntityState.Modified);
        }

        public async Task<int> Supprimer(Participant participant)
        {
            return await Enregistrer(participant, EntityState.Deleted);
        }
    }
}

Complément RepoEvenements
=========================

	private static readonly TypeEvenement _typeEvNull = new TypeEvenement { TypeEvenementId = -1, Libelle = "(Type d'événement)" };
	private static List<TypeEvenement>? _typesEvenementAvecValeurVide;
	
	public List<TypeEvenement> TypesEvenementAvecValeurVide
	{
		get
		{
			if (_typesEvenementAvecValeurVide == null)
			{
				_typesEvenementAvecValeurVide =
					Context.TypesEvenement.AsQueryable().OrderBy(it => it.Libelle).ToList();

				_typesEvenementAvecValeurVide.Insert(0, _typeEvNull);
			}

			return _typesEvenementAvecValeurVide;
		}
	}

	public void RazTypesEvenement()
	{
		_typesEvenementAvecValeurVide = null;
	}
		